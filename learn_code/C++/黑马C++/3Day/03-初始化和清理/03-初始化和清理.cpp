#include<iostream>

using namespace std;

// 构造和析构函数的意义：
// 造函数主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。
// 析构函数主要用于对象销毁前系统自动调用，执行一些清理工作。

class Person {
public:
	// 构造函数的作用域是public

	// 1.构造函数写法
	// 与类名相同，没有返回值，不写void，可以发生重载（可以有参数）
	// 构造函数由编译器自动调用，而不用手动，而且只会调用一次
	Person() {
		cout << "构造函数！" << endl;
	}
	// 重载构造函数
	Person(int a) {
		cout << "构造函数！(int a)" << endl;
	}
	// 2.析构函数写法
	// 与类名相同，类名前面加符号“~”，也没有返回值，不写void，不可以有参数（不能发生重载）
	// 析构函数由编译器自动调用，而不用手动，而且只会调用一次
	~Person() {
		cout << "析构函数！" << endl;
	}
};

void test01() {
	Person p1;		// 这样会默认调用了构造和析构函数，是系统提供的两个空实现的函数
	Person p2;		// 这样会默认调用了构造和析构函数，是系统提供的两个空实现的函数
	
	// 重载构造函数
	Person p4(1);		// 这样会默认调用了构造和析构函数，是系统提供的两个空实现的函数

}

int main() {
	test01();
	Person p3;		// 没有输出析构函数，因为当前函数还没结束，system("pause")发生了程序阻塞，实际会有析构

	system("pause");
	return EXIT_SUCCESS;
}