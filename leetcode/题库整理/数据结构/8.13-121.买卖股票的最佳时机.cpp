/*
给定一个数组 prices ，它的第?i 个元素?prices[i] 表示一支给定股票第 i 天的价格。
你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
?
示例 1：
输入：[7,1,5,3,6,4]
输出：5
解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。

示例 2：
输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 没有交易完成, 所以最大利润为 0。

提示：
1 <= prices.length <= 105
0 <= prices[i] <= 104
*/

#include<iostream>
#include<vector>

using namespace std;

//暴力枚举
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = (int)prices.size(), ans = 0;    //声明初始量
        for (int i = 0; i < n; ++i){
            for (int j = i + 1; j < n; ++j) {
                ans = max(ans, prices[j] - prices[i]);  //比较当前历遍的差值与初始量的大小，迭代
            }
        }
        return ans;
    }
};


//动态规划
//历遍数组，记录数组内的最低点
//假设最低点买入，然后历遍之后天数值计算出收益最大

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int inf = 1e9;                                          
        int minprice = inf, maxprofit = 0;                      //声明最小元素值和最大收益值
        for (int price: prices) {                               //历遍prices数组
            maxprofit = max(maxprofit, price - minprice);       //记录历遍过程中最大差值
            minprice = min(price, minprice);                    //记录历遍过程中的最小值元素
        }
        return maxprofit;
    }
};

